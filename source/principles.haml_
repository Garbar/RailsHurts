---
title: How Rails developers misunderstand software development principles
layout: page
---
%h1 How Rails developers misunderstand software development principles

%p Let's assume for now that maybe we don't completely understand something. This little something makes us use Rails in a wrong way.
%p In the early days, we accepted a few principles unconditionally because they sound like axioms.
%p People use principles and acronyms to compress meanings. By doing so, there's a risk that they'll be misunderstood. I think this is exactly what's happened with some people in the Rails community.
%p So let's try to decompress them, and see what might be wrong with our understanding.

#accordion.panel-group{"aria-multiselectable" => "true", :role => "tablist"}
  .panel.panel-default
    #headingOne.panel-heading{:role => "tab"}
      %h4.panel-title
        %a{"aria-controls" => "collapseOne", "aria-expanded" => "true", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseOne", :role => "button"}
          DRY - "Do not repeat yourself"
    #collapseOne.panel-collapse.collapse.in{"aria-labelledby" => "headingOne", :role => "tabpanel"}
      .panel-body
        %h2#dry---do-not-repeat-yourself DRY - Do not repeat yourself
        %p This is a simple one, isn't it? Just don't duplicate code. Whenever you see duplication, you should immediately make a function or a class and reuse it as much as possible. Sounds smart, doesn't it?
        %p The problem here is that it tells us nothing about when is a good time to apply this principle. And unless told otherwise, we assume that it should be applied all the time.
        %p And, maybe you forgot, but everything has its price. The price of DRY is higher coupling
        %p
          Guess what's happening when you apply DRY principles at the early stages of application development?
          You're still not sure about what your application is, what it's going to do, and how everything should be organized.
          But you already removed all possible repitition and made things coupled to each other.
        %p But here's the catch: the amount of coupling increases the complexity of a system.
        %p This is what Sandi Metz means when she says that duplication is much cheaper than the wrong abstraction.
        %blockquote.twitter-tweet{"data-cards" => "hidden", :lang => "en"}
          %p{:dir => "ltr", :lang => "en"}>
            “Duplication is far cheaper than the wrong abstraction.”
            %a{:href => "https://twitter.com/sandimetz"} @sandimetz
            %a{:href => "https://twitter.com/rbonales"} @rbonales
            %a{:href => "http://t.co/zAmc9pvNS4"} pic.twitter.com/zAmc9pvNS4
          — bryce irl (@BonzoESC)
          %a{:href => "https://twitter.com/BonzoESC/status/442003113910603776"} March 7, 2014
        %p By reducing the number of repititions, you're introducing abstractions. Your code becomes dependent on those abstractions.
        %p
          And if they were wrong, you'll be tripping over them every single time you need to change your code.
          And they are wrong if you introduced them when your understanding of the system was not yet mature enough.
        %p
          This thing is also called
          = succeed "." do
            %em accidental complexity
          = succeed "," do
            %em essential complexity
        %p For sure, you shouldn't want that additional pile of complexity in your app. Let's just keep things simple, right?

  .panel.panel-default
    #headingTwo.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseTwo", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseTwo", :role => "button"}
          KISS - "Keep it simple, stupid"
    #collapseTwo.panel-collapse.collapse{"aria-labelledby" => "headingTwo", :role => "tabpanel"}
      .panel-body
        %h2#kiss---keep-it-simple-stupid KISS - Keep it simple, stupid
        %blockquote
          %p The KISS principle states that most systems work best if they are kept simple rather than made complicated; therefore simplicity should be a key goal in design and unnecessary complexity should be avoided
        %p Sounds good, right? And we use it to advocate for Rails. Because Rails is so simple, right?
        %p
          Rails lets you forget about databases and other technical details which have nothing in common with your application business logic. That's convenient! We can concentrate on just one thing, and all the other stuff we have for free.
          the Rails world is so cool, that we don't even have a whole class of problems, which millions of Java programmers struggle with every day!
        %p But… is it true?
        %p
          Have you tried to read the ActiveRecord source code?
          It is insane. It is like a horde of gnomes inside of a beautiful box with two buttons and a couple of settings, who do all kinds of things to satisfy your request every time.
        %p
          %img.center-block{:src => "/images/principles/activerecord-mess.jpg", :style => "padding: 20px 0", :width => "450"}/
        %p Here are some of the things ActiveRecord gnomes had to do for you:
        %ul
          %li coercing input data
          %li setting default values
          %li validating input data
          %li interacting with the database
          %li handling nested structures
          %li callbacks(before_save, etc…)
        %p
          Looks like tons of work, doesn't look that simple, right?
          It has a convenient interface, but inside it is crazy as hell.
        %p But why should you care? Why not just let the Rails core team members suffer from that complexity, and just keep using it in order to keep things -simple- and convenient for us?
        %p
          Well, at some point when you have a pretty big system, you'll find yourself wanting the unthinkable.
          Something like polymorphic STI models which belongs to another polymorphic model through another model, which also has some valuable JSON data stored in Postgres using hstore.
        %p
          Of course, there's no reason to want something like this when you develop an application from scratch. But your app is mature and you already have all those associations and other stuff. Tt doesn't contradict the Rails-way, quite the contrary.
          So why not?
        %p
          If you ever try to do something like this, you quickly start to get all kinds of unpredictable errors and misbehavior.
          It is just because those gnomes under the hood go crazy with the complexity they need to handle. Or in other words, nobody from the core team predicted that it could be used in such an interesting way. And nobody cared to implement that specific case.
        %p And at this point it becomes your personal problem, not a Rails core team problem. You have two options:
        %ul
          %li
            jump into ActiveRecord the source and try to be a hero who covers that specific scenario and becomes a
            = succeed "!!!" do
              %em RAILS CORE CONTRIBUTOR
          %li reorganize your associations to make things a little bit simpler
        %p
          Both ways are usually pretty painful.
          Because of the complexity.
          Because
          %strong IT IS
          complex.
          This complexity is just hidden under the mask of convenience from you until some moment.
        %p So let's admit it - Rails is not simple, it is convenient.
        %p One of its conveniences is that we have so few things to configure.
  .panel.panel-default
    #headingThree.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseThree", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapseThree", :role => "button"}
          Conventions over configurations
    #collapseThree.panel-collapse.collapse{"aria-labelledby" => "headingThree", :role => "tabpanel"}
      .panel-body
        %h2#conventions-over-configurations Convention over configuration
        %p
          What could be wrong with conventions?
          We should praise Rails for giving us naming conventions about database stuff that makes sense.
        %p But some developers take it too literally and go mad with it. They introduce their own extra conventions. And they are usually implemented with hardly readable metaprogramming code.
        %p The bad thing about conventions is that they are implicit. So if there's too many of them, it can be hard to remember why everything is done the way it's done.
        %p Even default conventions might become too tight for you when your app grows. So just remember that the price of convention is decreased flexibility.
  .panel.panel-default
    #heading4.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapse4", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapse4", :role => "button"}
          Fat model, skinny controller
    #collapse4.panel-collapse.collapse{"aria-labelledby" => "heading4", :role => "tabpanel"}
      .panel-body
        %h2#fat-model-skinny-controller Fat model, skinny controller
        %p This is a lovely one. I do not remember the author, but in the early days we all suffered from fat controllers. It sounded like a great blessing for us all. Finally, we're figured it out! We shouldn't put all the business logic into controllers! Let's put all that crap into models, right?
        %p
          But why do you think life with fat models is going to be easier?
          It turns out that just moving stuff from one place to another is not enough.
        %p
          %img.center-block{:src => "/images/principles/fat-classes.jpg", :style => "padding: 20px 0", :width => "450"}/
  .panel.panel-default
    #heading5.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapse5", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapse5", :role => "button"}
          Rails is not your application
    #collapse5.panel-collapse.collapse{"aria-labelledby" => "heading5", :role => "tabpanel"}
      .panel-body
        %h2#rails-is-not-your-application Rails is not your application
        %p The problem with this is not that it is misunderstood. It is not understood at all.
        %p
          It just doesn't make sense. Here's my Rails
          = succeed "." do
            %em application
          %code app
          folder. What's wrong?
        %p
          This is where the idea of
          %em DDD
          starts floating around. We'll cover it next time, but for now let's not overcomplicate.
        %p
          Why is it always so painful to upgrade to next version of Rails?
          Can you imagine your application without Rails? I mean your application has some business logic, right? Why can't you re-use it for some small command-line utility, for example?
        %p It is because such code is desperately dependent on Rails. Every single piece of your Rails application code depends on the framework and assumes Rails is there to help.
        %p And if you have business logic code intermixed with the Rails framework, guess what happens when business the logic changes or Rails needs to be upgraded?
        %p
          %img.center-block{:src => "/images/principles/businesslogic-rails.jpg", :style => "padding: 20px 0", :width => "450"}/
        %p The PAIN starts to appear from every single change which should be done!
        %p Ideally you business logic code should have as few points of contact with the web framework as possible. It is a very good question how to achieve this.
        %p
          %img.center-block{:src => "/images/principles/businesslogic-separated.jpg", :style => "padding: 20px 0", :width => "450"}/
        %p Moreover, this is not necessarily a one-to-one relation. Your app might want to interact with more than one framework, or there could be more than one app interacting with the same instance of the framework.
  .panel.panel-default
    #heading6.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapse6", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapse6", :role => "button"}
        YAGNI - "You aren't gonna need it"

    #collapse6.panel-collapse.collapse{"aria-labelledby" => "heading6", :role => "tabpanel"}
      .panel-body
        %h2#yagni---you-arent-gonna-need-it YAGNI - You aren't gonna need it
        %p It looks pretty clear:
        %blockquote
          %p
            "…a programmer should not add functionality until deemed necessary" (
            %a{:href => "https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"}> wikipedia
            )
        %p
          But wait, every ruby developer in the world who is about to build a new web app using Rails.
          Rails provides a lot of functionality you might not need yet.
        %p What if you don't need a persistence layer yet? Wouldn't it be better if you could develop stuff without thinking about how it is going to be stored in a DB? Wouldn't it be nice to implement a persistence layer that can switch from in-memory storage to MySQL or MongoDB or ElasticSearch or whatever?
        %p
          When we choose Rails by default, we make critical decisions about storage too early.
          And then we become slaves of the storage or even slaves of DB schema.
        %p
          And what if you don't need a web framework at all?
          Have you ever asked yourselves this question? :)

  .panel.panel-default
    #heading7.panel-heading{:role => "tab"}
      %h4.panel-title
        %a.collapsed{"aria-controls" => "collapseThree", "aria-expanded" => "false", "data-parent" => "#accordion", "data-toggle" => "collapse", :href => "#collapse7", :role => "button"}
          Composition over inheritance
    #collapse7.panel-collapse.collapse{"aria-labelledby" => "heading7", :role => "tabpanel"}
      .panel-body
        %h2#prefer-composition-over-inheritance Prefer composition over inheritance
        %p In ruby we have mixins. A long time ago we learned that inheritance sucks so we tend to switch to modules, assuming it is any better.
        %p I'll just post this tweet here:
        %blockquote.twitter-tweet{:lang => "en"}
          %p{:dir => "ltr", :lang => "en"}> In OOP there’s this thing to prefer composition over inheritance. And in Ruby people constantly forget that modules == multiple inheritance
          — Piotr Solnica (@_solnic_)
          %a{:href => "https://twitter.com/_solnic_/status/623224611212251136"} July 20, 2015
        %p Still not convinced? Try this in your console:
        %script{:src => "https://gist.github.com/solnic/ee0a023a48a56bd224a4.js"}







