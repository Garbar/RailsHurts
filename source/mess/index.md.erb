---
title: The Mess
layout: page
---

<h1>The Mess.<br/>
<small>Why it happens to your code again and again?</small>
</h1>


Ruby on Rails considered a universal framework for web applications creation. So, whenever you develop something for the web with Ruby, Rails is your choice by default.

At the beginning of development, everything is super-quick and straightforward.
Then you add some gems, and they seem to fit perfectly, and they boost you even more.

<%= image_tag 'mess/cycle.jpg', :width => '450', :class => "center-block", :style => "padding: 20px 0" %>

But after a while, when you added more functionality and gems, you start to notice, that some of the stuff does not fit very well. So you start using nails and glue to stick everything together.

The whole thing still seems to be movable. Although if you keep adding stuff, at some moment you find yourself in a situation when every step forward becomes too painful.

You fix it in one place - it breaks in two others. You introduce new  functionality - it conflicts with existing architecture. Not to mention about Rails version upgrade.

This happens because of increased complexity due to application size growth.

<%= image_tag 'mess/mess-ratio.png', :width => '450', :class => "center-block" %>

The bigger your app gets, the more mess you get. Unless you're able to manage complexity.

This ability can come from two sources:

- Complexity can be managed by the developer if he is familiar with corresponding practices.
- Or framework itself offers some solutions &amp; instruments to for the same purpose.

Rails framework is known to be optimized for developer's convenience. Things can become hairy pretty quick. Remember conditional validations for example.

Developers, who tend to rely on default Rails way, become trapped: "Rails is good by default(he thinks), so there's no need to learn special complexity management techniques"


## What can you do?

To break the vicious circle of Mess, you obviously need to improve your ability to manage complexity.

You might need to learn about concepts and aspects of complexity management. Here are some categories:

 * SOLID principles
 * Design patterns
 * Refactoring techniques
 * Architecture types
 * Code smells identification
 * Testing best practices

Or you can rely on tools.
You can start using tools with *modularity* ideas built in, like Lotus or ROM.
Of course, there is a less radical way. You don't always have the luxury to start it from scratch, but you can tweak Rails to provide some complexity management abilities. Some of them:

* [collectiveidea/interactor](https://github.com/collectiveidea/interactor)
* [apotonick/trailblazer](https://github.com/apotonick/trailblazer), [apotonick/cells](https://github.com/apotonick/cells)
* [makandra/active\_type](https://github.com/makandra/active\_type)

Of course, you'd better do both. Because if you use tool without underlying principles understanding, it might hurt you ;)